initSidebarItems({"fn":[["basic_concept","异步 I/O 模型基本概念同步和异步，关注的是消息通信机制。（调用者视角）同步，发出一个调用，在没有得到结果之前不返回。异步，发出一个调用，在没有得到结果之前返回。阻塞和非阻塞，关注的是程序等待调用结果的状态。（被调用者视角）阻塞，在调用结果返回之前，线程被挂起。非阻塞，在调用结果返回之前，线程不会被挂起。阻塞，与系统调用有关。"],["epoll","epoll"],["epoll_server","Rust 实现 epoll server 示例讲解https://github.com/zupzup/rust-epoll-example/blob/main/src/main.rsReactor executor Example实现跨平台minimiomio and mio-examples"],["event_driven","事件驱动编程模型因为处理 I/O 复用的编程模型相当复杂，为了简化编程，引入了下面两种模型。"],["io_uring","io_uring 异步 I/O 模型Linux AIO 实现的并不理想，所以引入了新的异步I/O接口 io_uring。"]]});